import scala.collection.mutable.ArrayBuffer

val input  = "lflZfgnSnlmmlgGfjGthQPtLNsQhvbHLLpSS\nzrCVDVFMJTCTcCJMwCThWbtbpbWpPbtbHPLQssLsHP\nrBFcrwFzFwwVDcDrzTzJfnRGjllBdGZnnZfhqmdn\nFjpnFRDmbRtnbJrFJmSTsGShWVhGqGVVsmqs\nZwPvNPdzNZwfzBNLdNNNNcLvhnQhqMTVsTGSWSqGqTdVWhMT\nvgLZHfvLffNLPbggnrbFpJnCbC\nhzJzGjGfqmGtDQtDSvVV\nplpcMBNBcCTlTgCMbvtrsSVsVJDJlrwDQr\nMcHBMMcTTHgJnWqnRqjzZnnRzR\nppvsGZhDGprrSjSllwfZ\nTTFMMFJMgMHmHmdqdSvNqlSSSNJv\nmgBPHTRWFRVcpvsVttppbv\nZZDssfMDMtqqppZLLJzmzSTwNJplTSgpgm\nBdCRRHFRbccWWBvBHCdcJVngNVSvTgVNzgNNVmnz\nQHFFrBdcGtqPmmQh\nqLvQFRgLSSNgqQvRrqLTQvLttwDBFWDwjwFttDdlBBwBwM\nnbsmZnbmHbZVCGPVmHWtwlStBDtwBMtwWHMj\nCnCbhGCPpPCSnZmrgRNRqNRrLNgrzh\nvgLWWHRNLnWwLggWzwLFFzMmBMRMhMhTbhsmmsbbmQTm\nrScpJJDDpjtSDPPPJDpjqPCHBBtlTdblmmlhBsMMmTsbmtsl\nGHZHCPprSSwgvWNVwVZv\ndMrCMJMqvtdFwcjczjQzThtm\ngGbLblLpZlHvllQhlQwcjT\nGHRWvPRbPHPRvNGbvdRBqdqBBfRqBqnrfF\nVsHcljlbhmHbHHlcjVcVShJSCdJCfMrMMQDfRNFCfMRGfNrQ\ntGtvLtpgBTGvDMMRdMMgdCNM\npnGnGqGtvtzTLjWqmSSjHhWhWs\nNJTDntDNDVjNnjBfjjjcCZCZcVqCSCLqcSScCc\nzvhgRgQvvdllgQbHghlvHrRHSScBCRqqwCLGqSMCZCGGGqMZ\npvvrHzdgvlgzQphQsDFmnsNTTtjfjJJmPB\nScnSZSZZlmjmHjjWHHWZftJVJpppwtVVnLJtnptnwt\nCFFlQBbbPQqrBwJrJJrGJD\nPgTqRddFzgdRPFFbFgqQFgsSjfHWfSHmSMWcjZlmZmjTZM\nlzBRtctbnBRBRBBWnDnDWjlLVvwGMrvwrHHQHGmDvHQvHGrV\nFsTgFCTSgsCNspzhCGMfTHQVwVMfMmMmrH\nhSdSFgghhqpRbLqjntqnPz\nDCDnNGFFDQdQmVDNdFVNFccpJLHWSvPLrvvvPtGGhSttLv\nsBgTzzZqrBlfljslWBhvHSvPBhSBJSSL\nlRlTgMzlzrwRrnmbCMCFnNVMnc\nMJQJMJHBrsdrHwts\ndbbSVGgbjVqGTVfqddCTpmWWcprgNgWmcWwWswpN\nLPdGGdVGPCVdLBlBMlDRRRMD\nvdcwZLTdTFFRDHVgmpppMmqZ\njGPzCnQPjlsDVqDpqDHbgP\nBjWJrlGQQzrCzBzlzBCGBznzwNRNcwLJdwTJFTHRSTvtLcNN\nngrgqTjJJZnjFJpnqnnVTLzBbbHbLQdLHLHbrdHdHG\nlNcltCCtvftfWssPbMQdMBzhbbcBDLdh\nPRtWsQCmWsmSsCNCSvCSWlspwgqjqmqjTpnJZwnZVpFwgq\nPjWjGDCjmrmWPNmvWDWFmgCNfVJRLfJRfLDLJQlfHplpRbfR\nMtZMtcSbccZshTtQTVVTpzHlLRRQLV\ncZhbwMnwqsqnhnqtMBnvNFrnGPNPPmgPGCgW\nWBjWjWjqZwQJnJZCZZbf\nStHSDRPHHcTrTrJpLCCMbrqnJn\nRvTTvGqcqTFvSvSRDHvRjlhgWBWBdhjwjGgNjhlj\nFSbCqcFsbCPtrcrqhCScbshMjHDGGWBLHBnjGLPBHGGBGnHj\nflQdlsgQgGnQHBHjDn\nvllgRZdmvsvpgdwZgzJdwRmprqccSFcSShJbTSttqMCrCCch\nGwwgCtvHgwcHVVDqpWdfnqVv\nsllBsSNBjSrLfqhLgjfqhL\nZbQbZQzgQQPSblBggNQRHGZHHCmwmHFGGcwtJm\nCmGVGBTVTmmTWTNLLCVgCSFvDQppQQDDnDQDJpMggfnQft\nRrtdqtldPbHzRbnjRfQZjJfMDnMj\nwcwhccqrdrrlFmLGCwCtSwtL\npzZznZphZnpcNWSwGwVVPzrPrG\nlgFllLLltgbDsrBCwrjWGmwmtw\nMgJbDLlMQRJccchrhc\nwbbjzZhdGDwLzZSBWqqHmZgssCWqFtMZ\nVRJccfvPlTTlQlHQCWQhMMhCCHqQ\nRlVfVJcPTVTfvvvJfNJVlcBjGjwhSLdBNGGnjLLBwzGb\nbvpqHMVTTpZnqnWRQQQw\ntfhFFdSFggfhbldhhZcnRscRcQmnRs\nDPzgFJzFLfFbFSgPFgdPglMHpvBpHTCMGpjvMMpLvvNG\nJggGLQgQpLpSPRJgGPSnGlFTDBjjRFvRjtBFjWvFjqRj\ncmHhZcMHcWjrTBjrvm\ndbHwdNNHhwTNThZHdlwQJJwngpgnJGnSPw\nDbZjVfjVLhZDLpWPHpMZPmmGNp\nlFcJJGcFqnBFqwJCHHMmNHPsdCNp\nBlwccRQtBwBrwLGbGhGggzLgzR\nRBhZPjlWqgbNbgGLBr\nMzSmSzpFdHwpswzzHnzjnvLCbgtrtLGLbJLLJNtJtbwJ\nMsSHdmMdpFfmFjpfcPWRhRVZfWQThZ\nmqmssPCFhhsJccVg\nFTttfwdjjHznJgfngpnc\ndNFTjQNRtRNQldRNrRdHMRrlPZqCGlGBCqqZmmbPqDmDCmGW\nZJVRRZZJRcvmPhCJrvhm\nPPWQDTfWbnnstlCGvjGrWMGMvr\nTbbwddndsnsfDpwFqZFVHBVPqc\ntFmpJmgJJgmFDWgRgFrrlGSltSQvZChMtCMM\nTLcZHsjLVNBwGQCCGlsCShvh\nnqNdwwccBwVLwjjDznZzppbgzFZfDF\nqsTqCCCszjlqTssBShlQSSZFgZZhgB\nLDPmVgDDJdLPrPgLgPZSFZQfhQGGBQJcSFJS\nmvmVbVvtggVtvgdLVvtmptCsNTtjRnpRTTjpsqCp\nBdNPLnmFvLFNgnmBmnFGnwSZZZWwqWgqjwWssTHWSS\nbJhMzhbVMbDCcVpZtjHMqTMwtttSjH\nhzclfCppVqQfbzQVbpzPQLNFBdrvdNGGBnmrmP\nnLVLzBDJCCHqdLncqVJgSsDlGsbssmvvvbvbff\njMNHFWNTZZNwMPrPWrrPMMrrvSllbgsllfgbgvQsvGmglZbv\nRjPjrjRPtNrwHhBtncCJtJtL\njbhhjhNjvqNbmjMjqhtCFdmPFdlzJzfFfJQJfR\nGBBZWrZWgpSsnSngrrSgHzFzFFdClzfFQFlRZftQPR\nTrGTrGWHpHWGHWVWsngprHpLbLLVvcqMcNbVNLhwVNbtNb\nsQDvDmDLQFDRsdchzhBczLhhPhVz\nMbGGMjjGZSjvfHvHSbfwBqcPnqqcPVhPNnqnzjcn\nZwMMHrWvSHbfJfTrbJwSMMfMsQDtsFRptlpdCRpWmptQDRmC\nTwMHdcTznLqzTrHdzzzHTdgMRQWRhJhNjjvgQvQQWNjl\ntbfsVbDCVSSDtSPQJWPvRNhQtghN\nFVGBpGCVFCbfCbVbZCSHqmwqcqLcdHJGwHqqTd\nlTlGfjLGwHNMggscsDRwsC\nMrFtrzZZPZrtVQtnrrFdQhhDPDSphgDRhDcsCCgWpW\nZJmJVzVVJFHfGbqJGMLv\nzsFZVjzlHPfTzGfLGt\nmdrrmdMMcBcmNqNbPqfRDLPWPlqTWD\nBNQhmmrBrQghgSmNBQQSmvwssjZZSJHljJFFHZJvZV\nrLZCsZdMJfdNCsfZMrLdFmssnwgTRQgBBwgRwcngTNVRVQjV\nStqDHlStDPgRTqcwjT\nGlDGDhbpHhvSHWlzbWlhpzhJdrFLrCLmvdmFZsmJJjJfdv\npJHJMJsJjSMFdHhszFvMhlmmGNlSmmBGllWmVlwcTw\nZqZRDrZCZDtPDPDrCngrnnPQGVmGHVBWGWtGmWVwVlmTlGNl\nZQPgRqrrQPqLnrLMvLphHdvdjpJddb\nNwbBjljFbcjtTcccqW\nRHZrPHPpNgZTzTqc\nsfrPdmPdpsmPPPrfQPVGlwGVBwbGVnFlNQCG\nhQdNTlzhdTvrhdnTBqcWBLsBHgWQgBPg\nzwzRDbDfqZBLHDLB\nwFbFmjjRzfmjGGMGMfmJwwGCCnvNhpvSCNnrvJvCprnnSp\nzshNNJbwGFJfGJzzzNRnHGnCnRHcRPgTmPmn\nLMDVtZLStrrZClBrVDllLSBWRPTPPRRPmgWPVmPTPHTWgR\nSDSqLMlrtLlLtrBqBdlMZjvffCNzwvhjvvzhdfNhvf\nSLQmGBmhLSLQTBGBGwdwpJjwwQjwcVpJZJ\nsNrWrWPNbHghrbgnNNzbWbFWdZpMpzVpdMZMzMMVZcwwJdwd\nfrrPNNWshWhhHDvDGDRSBSRvttqv\nFJqpgvhJJRjFjZTqDsMHrzwjsSsSszMrMm\nPPPQWGtnbbfBmPsFswwsMrcc\nQfBtbldtWQfbWbnfGlFqZppvpFZZLhFlpq\nZqSMZHHCMpHTZTWmFTFZPZQJBgVGVJQvVVSDBvBtcBBG\nRNsndwsNjsbsgGCgjQBttcBg\nNRszRRNzLNNNwNfhCCrfdmTqFZllFFHFFpWhlTmWpq\nllbbzDmSspGRpHpzsldzRRsVtFBBFJMMVVFLTTTMVtLTDM\ncqgjqvNgvqCjQZqgGGnhMTnMJVLBLMtFhhVFWB\nPfGGvQrPCjvjZgGCCCZZZbSmmmHlRpprlHrHwssSRr\nmRmpFpWpfMMgLnmS\nCdCsqzdRzqStLjSqfMnL\nwQRHdTzCQbzCwsTrZBlFZGpVlpFGQD\nqnMTnTVSTPTHTHcMZMvVpmppmFmVzFLLFLlFpG\ngBjDsjRRwhDDghthwwWZwLmpmwWWLWLbGZ\nNhZtZtBgPTNJJNTS\njLjjmpHvzvZrfzQjmfHHWrfbqblLsSlTsqsgqPJbPqVglb\nFBcCwDwtwgcgnCwcGchtJSsRqVRVJPPqDlbSDRPq\nMBhthFNtMGCwhcwnpQfWjNrQprpvzpgQ\nRfCnWfnhCbwHgWjzBgzB\nPsVqDsSTshsgszpsph\nDPDvTVtTShhSZhmqSvLlQJFnQJJZnbCnlCCZ\npRRdJngltnwwvTNSWqWffqgBqD\nHQGcsdrjzMDDBfGMGG\nFLhsdbzCLLHjhntpVnRPRvZV\ngZNwQHHNRlGvhvhGRvRb\ndpSSBDrzdCfcSzfrzZrfCfMbthWWWPttDthvMFWvvvPj\nZdpBpZCrssBJZfSJBzBdCTcnmQwmnVVlmqTQTTQlHLwNnN\nssCpTttVVVpzZDVvRpCsRtDgWBWBBFBJvvJHMBghGghrMJ\nlwLmNNLwSblbmSQLfhJHZgHrHhhJJhHHmW\nQLSdbdPqndlNlLdSLNQncpRtRTcRVTPPZRCjVCcc\nwzzJclzcTThvWSSCqRlQSsNN\nrDpVjpVVDpsQSRDRfQmm\nGLbjrLpFbgLVLLgdbjVpchcFZhvBwJvtvtJcZwRB\nwPgZgLVMfWVTgmTZZZftJjtfjtJCcdpjdCqc\nzGGbQQnQGvBBhGQvvvBBSBvQdhdqqCpdddDmJlCcDjCtJdmJ\nHszzHBzQBSmGSwTWgswZPWTVgZ\nGDFvzCFdrszSdNJrFfjjfqZjRfsjpqmcwZ\nWbbVtVnBPWMgBLMBnQQnBQHcjfjpZRwqcwMfcNTZRqqNmT\nWQQnVVPHtggLghWWhHnPVQbvlJhSlrvJDlFGJDdDCzGNFF\ndVhTBjBHtTVqWRJZRqhJZQ\nbrSDTbDfcCwDzfCSbwMQnlqCRJnMgWWnZngM\nDFwNSrwNwbDzbFTTFtjmBpVdGpHs\ndPQfdfTzDrFDmFDBgBFj\nRlJRclcswJRvnwPcpjbjbbCZjFjbBmsbFZ\npqncGlcRJpHGpllGHhvPhRTHrQrttVVfrdQzfrTdftfV\nRCzTzRMTfCfRRDzRfhSmZZlCslBbZZBVtZBZsqBL\nnvvJPpdcFnPcWnFnVZvBqVlZMbZBNVlV\nFpWPMdjdPhSTmwfSjD\nNDJjNHLLNWjcLLWCLJLZjLDtRqqtgtMqgtqnRqnSRgggtZ\nBwrlfFwmQwhwfPBFhsBdFmbQggCgqQVtbRSqttqMngnp\nllPPwsPlGshBJGWJLcHvCzNv\nrBvTmwdTSbnrvVWsWVftGfJQGT\ngNRLLjlPRWnFVRFDFW\nlpCpPNZqZCdvdppnSnBr\nShRdCrJgHClZJtZDGMMz\nLvqVVTTNbVPLQNFTnwwMtzFZGDDwmtnM\nVLbNvpPvTNVqVbbNpbVPGNLPrRWrcRCWdSrCjWSHcHSdWpCh\ntNmZnLSZPFLDnLTmhJMWczQdhmWhWH\nbGqbgrpsCsWhcChNQfJz\nvwlNbppsRGRRSSSDvjTjLZjZ\nzgMZhgfBtftSZQQmLHpSWH\ncdqcqnrJVGjjqPVjrPnfpJmsQHQQpsSsbsSDmm\nNNnrNqNlrNcPTlBvBvgggfMv\nllPrrLHBHCrRRBjrHCjBdrPmvJZzZgZbmgJlZmZhMhhmvh\npNDstVtNtGFNSDFScQtfwzzFJwmJhgqzbMwqZJmh\nfpNsptGtQcTsSTccprddCWPrWdTRBMMCMd\nTTtDVqTsTcJFgbCqmbCq\nNWZQnllzfBFZPBGWQGzFPFRNNgHbHrrwbNrmCbggJRHR\nnBZjGFjMQBMPZnjfWjstpcctttvVtcTttMpL\nqphVCCwnHqhnRVznFwvLtBTLDTWZtwLWWS\nJmdlsdlsjfJfrtjTcvtctDZSSB\nrsmfPGbrPbPJfPmrsgMrdJdlFTHhFCqhNqVHnNHHCFznhphG\nJsWFMJJzrhSSdFdldmmdmdQc\nqLLgCVTgLbBvqsQPVdQGcRRmQmdc\nbBCBgCCDbLDqTvqqjpShHfzrzMfjtHHSHsfz\nnvFSBFlvvgQFFBzQnlQglmRRzqwsrrMJJMrsMqrfrwzf\nCjZNCNhLDNbPZZLZZhwVjpcfrqRhsdJqdsshRTTdqJrJ\njNNDDppjpjDWNVLCVVDpGVVPBFtlSQFWvvQvSSQHSgwQnvtB\nWhrQWBRWwhzgmpnSpH\nLqMVsJVvFMJLJMsfNjsTJvCgFbSmzgpSHzmngHbGPCbm\njvMjjtqVjTRnwZQwBWwt\njfTWSGSTTWhgcngQfbtJfNzztBQBzz\npVVwsdppRVPLVmPsVVHsjPLPzQdzBzQFzFBNNrJZZQBzbbFF\nVmsqHmjHmpvGDSWDvlclSl\nPNZfTFSFfTFGCHqqmbFm\nWjzRWrjVgnjzplrWWjJVppgGPGsgstmPCCtcmssQqGQt\npzjzJVvnzJjWvpPlnVRVrvnlTDLNNhwfdNZLfMZLwLhTNvTw\nQFrQZMFVrVpVszzcNTdMRCCb\nSvljGmlvLfwLhLLLHlHdNzsRthhbbRccRCRNbC\nLfwlDmlvGBSjjlLLgpPpFJqgQndQgZBJ\nRBjPRHdjPfqQcfhcdv\nSngFcJZJlcnctSlhhsQvGsDGDsDnfs\npSmFgSWNJFNtStrmNtpCCjPVcbjjHbcWTBHBHL\nvGjqCPqNPGFGNftLwmZwfQNTLp\nhrdBCSHcCJJcCBShJswmLQpLbbQZTLLJmmZp\nBdHHSzrBWdzchzzCcdzHddcDVWFnjPjllGggVlWljPFFFWPM\nhBtZZnpbhbPZJbnhDtPnpBtpfjfNNzrrCzjFzFzFTjfjjWzJ\ngHllMqRSmqcqMTdggMqHlcFzRrFQWNfvrRvzQrWjWvWf\ngwqlgHmmdsgwlwMHZtpsbBbtDBThbBht\nCsDLFFLFCvczsCsJrCrJJLRgbQQgmMmPbDDQbPnMgMmg\nVlwNBNVhjNVNWBwWjtbRMRZzPmQnfQMPnlZP\nVWWSSwGTwtwWWNVwwpqJJrcJGvzqCJCqJF\nwLwSSbzwCvddlvvlSj\nTHnQnnHttcvpQzrZRllZ\nsTntBHTnVbPbgzsbgL\nFwHgrHvFQQwpHhNhTBLdpNNNLd\nfCGqCVtszfSslCSzSGsfCssjNTqLTdmjNLBLdnTTTMTjTg\nDccfslfgRSSVVzlcSVtzDRVHwQZFrwwvwFWbbbRRWwrFJb\nCwwWwwFNRpFFpZQHtsmfqbQDTQTTqb\nVcjzLjGjzGjGjVjLdzqmDqHrsmsqGRrHqGqH\nRjdVlgdnljlBnSgPCpNwwMWwMM\ntCCtqtbPGzsSQVzQTq\nmzMmHMpRsRQTsFFV\nDpzDwgdMzMLppNmNpDpfgrbhLcGtPrbtrbrbhnbBcC\nBvsQBBBLvDQGjDvSQLTvrHprHlRpVlVllgRbRbHPqq\nMMMMCpfJFZZMmCzwpVPCWRtHgqWgqClgtt\nFwzmfzhFFdFcpvSDSBDThs\nfQrGQbFFFrHHtlHPclzzPLvc\nmTnwpNCCqMqjmCThpTpSvvtBczstlLznvsztsPPP\nmCpTNhmmpCqCmjmpTjmLCpSJQZVfFVrDVfffFFgfgJQFdbgG\nGmWjRBSfttcGfRcSclVVJqsTMllsgJVMVZwV\npPFNpfNCdNzCVMTTNqVssqJN\ndzPfHCLLhdjjLGRnmnmr\nGPhPfGWgggfslffPsVPGsqJMzLQJtBprwQJJGQwLpQrw\nZNdmvbDDbNvHbmZCcJQwMmzMwWWQrrwttp\nbvdDNdnvNbnHDdnDHHRSbnqhqhWfjWFVTVhRVjfjFTfP\nhTThfWNCDRfsVCDhpgzgbpPZZwbnZQns\nGSjGGcCBGmdjdSlGBcmZwzJzpPpJzwPwQbzgPd\nBGmcrcStcMMMmrSLmSMCvFVRFDhfFhhNDWWTqFqTvf\nZmjDTTbmqQCCQQSwvhsL\nFGVJPmPmtRVRsCvvRLwwhC\nJgdHJgmfbjzTpTMf\nfTbsVCsssgLNrfNrgm\nzQvzZlRvddvpNLpZrMNNLZ\nHLvWFHHlFQvzHnnlnvQqhzWvstBwbGVtstjGqjjwqGGCcwGq\nJNpNdzzdJhNnfNGBZLqZqlhvSZSG\nQswtcmmwwmTmwwcwZSLlZLDSvSvlBZQD\nFsVFBbFgFsPwtVBTwgTPcsmpzdNngfzfpCzJdzCJzNCndn\nqcvrLBppgpWWWgLcpzPfhNDqdzqwDDzwhV\nMZFjFnHFMHbMntMtnwStfddPhDffDfzDfS\nQmnjMZnlHjmnMGFnFlMmjlZWzLgsGgcrspBBLCBcgvgBRC\nsdfWHjZfrZrSPMCQ\nzqtWRDDDRMbrQJPQ\nzwhwzmqwzmFpWzvFqBmFvjNHlHfgVLBgdfVfNVjLsl\nlRlBTlvlZfhtbGBWtFBz\ncqCNjjqjrNrcNjwDqNPCVrSQStSWshFhtQhbQzGzmFCG\nHjPPzMcdNqjcNHMqPjdpgpZflfdgnTfdlvlJ\nVpwQJVRtHplnnwtppHhqWBCfVdNNPqPBPWsBDq\njzLZCrvvrZjZvqNffvDNDcWDWd\nLTrZZLFZbgTzgjZZjFClJhTHTplQpmnQlpmpQR\nJGJnSWLGSpWHVHwGGJHpZdwPdTTPMdTMDdlzccPMPv\ngqrrmtbrbgggqgBtqmRSrFgNCzvMDvlMPDdddvzBcPMMMDBd\ngjrmRgmtRggFtqjbhgbjrtnJJHWLHQWZZLhZsLLGHhSL\nBtTDNggLRPdWQHqggg\nwrVpVVlCJVGMMJVdHWSdPSqqRwSQSP\nvCVrpvvGjlphBRmZBhmBhBND\nlqDcZGcSSqSqbDnccSLJgHgLRfnvvJRLmvWJ\nFVCFPChQzVhmsFBgddRgJBfdNfJdfv\nFzCpmTQzjQCThppTSttqDccMTDGcDG\nQCSGBGCrCsMBTCQwMGSfvvLNNnnVLDlNVNDdVdlr\nZHtPffjWbqgtmnNdvljFnFhdVv\nJRWbmgmRJtmJMGGwSBBRRRfQ\nLqNrCfCQQhtgnPnc\nJWBrWrVlbWgbbtcb\nVwvTBprdrVJVNLNMNNqfqpjN\nbjVqdHrdqVHPsPNbqHbqNdjFGRwRGlttRtMtRtFFGMLHJw\ncfSpZnBZWQBZJlGRJJcwGMGL\nWWBhTMgDTZghVjgjssbrbddd"

def lines() = input.split("\n")

val alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

def part1 = lines().map { line =>
    val firstHalf = line.substring(0, line.length/2)
    val secondHalf = line.substring(line.length/2)

    val firstSet = Set.from(firstHalf)
    val resultSet = Set.newBuilder[Char]

    secondHalf.toCharArray.foreach { char: Char =>
        if (firstSet.contains(char)) {
            resultSet.addOne(char)
        }
    }

//    println(resultSet.result())

    resultSet.result().map { matched =>
        alphabet.indexOf(matched) + 1
    }.sum
}.sum

def part2 = lines().grouped(3).map { groupLines =>
    val firstLineSet = Set.from(groupLines(0))
    val secondLineSet = Set.from(groupLines(1))

  val resultSet = Set.newBuilder[Char]

  groupLines(2).toCharArray.foreach { char: Char =>
      if (firstLineSet.contains(char) && secondLineSet.contains(char)) {
        resultSet.addOne(char)
      }
  }

  resultSet.result()

  resultSet.result().map { matched =>
    alphabet.indexOf(matched) + 1
  }.sum
}.sum

part1
part2